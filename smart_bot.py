import os
import json
import re
import asyncio
import shutil
from datetime import datetime
from time import time
from typing import Dict, List, Optional, Set, Any
from collections import defaultdict
from difflib import SequenceMatcher
from dataclasses import dataclass
from enum import Enum, auto

from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, ApplicationBuilder, CallbackQueryHandler, CommandHandler, MessageHandler, filters, ContextTypes, PicklePersistence
from telegram.constants import ParseMode
from telegram.helpers import escape_markdown # –î–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown

from logger import log_info, log_error
from translations import translations
# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –≤–º–µ—Å—Ç–æ –∑–∞–≥–ª—É—à–µ–∫
from parse_water import parse_all_water_announcements_async
from parse_gas import parse_all_gas_announcements_async
from parse_electric import parse_all_electric_announcements_async
from handlers import set_frequency_command, handle_frequency_choice

import aiofiles
import aiofiles.os as aios
from pathlib import Path

# --- –ö–û–ù–°–¢–ê–ù–¢–´ ---
class UserSteps(Enum):
    NONE = auto()
    AWAITING_LANGUAGE_CHOICE = auto()
    AWAITING_REGION = auto()
    AWAITING_STREET = auto()
    AWAITING_ADDRESS_TO_REMOVE = auto()
    AWAITING_CLEAR_ALL_CONFIRMATION = auto()
    AWAITING_ADDRESS_TO_CHECK = auto()
    AWAITING_FREQUENCY_CHOICE = auto()
    AWAITING_SUBSCRIPTION_CHOICE = auto()

USER_DATA_LANG = "current_language"
USER_DATA_STEP = "current_step"
USER_DATA_SELECTED_REGION = "selected_region_for_add"
CALLBACK_PREFIX_SUBSCRIBE = "subscribe:"
CALLBACK_PREFIX_PAY = "pay:" # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –±—É–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
@dataclass
class BotConfig:
    telegram_token: str
    settings_file: Path = Path("user_settings.json")
    address_file: Path = Path("addresses.json")
    notified_file: Path = Path("notified.json")
    backup_dir: Path = Path("backups")
    log_level: str = "INFO"
    backup_interval_seconds: int = 86400
    max_requests_per_minute: int = 30
    max_backups_to_keep: int = 5
    ad_interval_seconds: int = 86400 # –ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã (–ø—Ä–∏–º–µ—Ä)

    @classmethod
    def from_env(cls) -> 'BotConfig':
        load_dotenv()
        backup_path = Path(os.getenv("BACKUP_DIR", "backups"))
        backup_path.mkdir(parents=True, exist_ok=True)
        return cls(
            telegram_token=os.getenv("TELEGRAM_BOT_TOKEN", ""),
            settings_file=Path(os.getenv("SETTINGS_FILE", "user_settings.json")),
            address_file=Path(os.getenv("ADDRESS_FILE", "addresses.json")),
            notified_file=Path(os.getenv("NOTIFIED_FILE", "notified.json")),
            backup_dir=backup_path,
            log_level=os.getenv("LOG_LEVEL", "INFO"),
            backup_interval_seconds=int(os.getenv("BACKUP_INTERVAL_SECONDS", "86400")),
            max_requests_per_minute=int(os.getenv("MAX_REQUESTS_PER_MINUTE", "30")),
            max_backups_to_keep=int(os.getenv("MAX_BACKUPS_TO_KEEP", "5")),
            ad_interval_seconds=int(os.getenv("AD_INTERVAL_SECONDS", "86400"))
        )

    def validate(self) -> bool:
        if not self.telegram_token:
            log_error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ .env —Ñ–∞–π–ª–µ.")
            raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º TELEGRAM_BOT_TOKEN")
        return True

config = BotConfig.from_env()
config.validate()

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ---
user_settings: Dict[int, Dict[str, Any]] = {}
user_languages: Dict[int, str] = {} # –≠—Ç–æ—Ç —Å–ª–æ–≤–∞—Ä—å –º–æ–∂–Ω–æ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å —Å user_settings
user_addresses: Dict[int, List[Dict[str, str]]] = {}
user_notified_headers: Dict[int, Set[str]] = {}
last_check_time: Dict[int, float] = {}
last_ad_time: Dict[int, float] = {} # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
user_request_counts: Dict[int, List[float]] = defaultdict(list)
start_time = time()
settings_file_lock = asyncio.Lock()
address_file_lock = asyncio.Lock()
notified_file_lock = asyncio.Lock()

# --- –Ø–ó–´–ö–ò –ò –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
languages = {"üá¶üá≤ ’Ä’°’µ’•÷Ä’•’∂": "hy", "üá∑üá∫ –†—É—Å—Å–∫–∏–π": "ru", "üá∫üá∏ English": "en"}
language_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton(text) for text in languages.keys()]],
    resize_keyboard=True, one_time_keyboard=True
)

regions_hy = ["‘µ÷Ä÷á’°’∂", "‘±÷Ä’°’£’°’Æ’∏’ø’∂", "‘±÷Ä’°÷Ä’°’ø", "‘±÷Ä’¥’°’æ’´÷Ä", "‘≥’•’≤’°÷Ä÷Ñ’∏÷Ç’∂’´÷Ñ", "‘º’∏’º’´", "‘ø’∏’ø’°’µ÷Ñ", "’á’´÷Ä’°’Ø", "’ç’µ’∏÷Ç’∂’´÷Ñ", "’é’°’µ’∏÷Å ’±’∏÷Ä", "’è’°’æ’∏÷Ç’∑"]
regions_ru = ["–ï—Ä–µ–≤–∞–Ω", "–ê—Ä–∞–≥–∞—Ü–æ—Ç–Ω", "–ê—Ä–∞—Ä–∞—Ç", "–ê—Ä–º–∞–≤–∏—Ä", "–í–∞–π–æ—Ü –¥–∑–æ—Ä", "–ì–µ—Ö–∞—Ä–∫—É–Ω–∏–∫", "–ö–æ—Ç–∞–π–∫", "–õ–æ—Ä–∏", "–°—é–Ω–∏–∫", "–¢–∞–≤—É—à", "–®–∏—Ä–∞–∫"]
regions_en = ["Yerevan", "Aragatsotn", "Ararat", "Armavir", "Gegharkunik", "Kotayk", "Lori", "Shirak", "Syunik", "Tavush", "Vayots Dzor"]

def get_region_keyboard(lang: str) -> ReplyKeyboardMarkup:
    regions_map = {"hy": regions_hy, "ru": regions_ru, "en": regions_en}
    current_regions = regions_map.get(lang, regions_hy)
    keyboard = [[KeyboardButton(region)] for region in current_regions]
    keyboard.append([KeyboardButton(translations.get("cancel", {}).get(lang, "Cancel"))])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=True)

def get_main_menu_buttons(lang: str) -> List[List[KeyboardButton]]:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º
    return [
        [KeyboardButton(translations.get("add_address_btn", {}).get(lang, "Add Address")),
         KeyboardButton(translations.get("remove_address_btn", {}).get(lang, "Remove Address"))],
        [KeyboardButton(translations.get("show_addresses_btn", {}).get(lang, "Show Addresses")),
         KeyboardButton(translations.get("clear_all_btn", {}).get(lang, "Clear All"))],
        [KeyboardButton(translations.get("check_address_btn", {}).get(lang, "Check Address")),
         KeyboardButton(translations.get("change_language_btn", {}).get(lang, "Change Language"))],
        [KeyboardButton(translations.get("statistics_btn", {}).get(lang, "Statistics")),
         KeyboardButton(translations.get("help_btn", {}).get(lang, "Help"))],
        [KeyboardButton(translations.get("set_frequency_btn", {}).get(lang, "Set Frequency")),
         KeyboardButton(translations.get("subscription_btn", {}).get(lang, "Subscription"))]
    ]

def reply_markup_for_lang(lang: str) -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(get_main_menu_buttons(lang), resize_keyboard=True)

# --- –£–¢–ò–õ–ò–¢–´ ---
def validate_user_input(text: str) -> bool:
    if not text or len(text) > 1000: return False
    dangerous_patterns = ['<script', 'javascript:', 'onclick', 'onerror', 'onload', 'eval(']
    return not any(pattern in text.lower() for pattern in dangerous_patterns)

def is_user_rate_limited(user_id: int, max_requests: Optional[int] = None, window: int = 60) -> bool:
    if max_requests is None: max_requests = config.max_requests_per_minute
    now = time()
    user_reqs = user_request_counts[user_id]
    user_reqs[:] = [req_time for req_time in user_reqs if now - req_time < window]
    if len(user_reqs) >= max_requests: return True
    user_reqs.append(now)
    return False

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤ (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ —Ä–∞–∑–¥–µ–ª)
premium_tiers = {
    "Free": {"interval": 21600, "price_amd": 0, "ad_enabled": True, "checks_per_day_limit": 4}, # 6 —á–∞—Å–æ–≤
    "Basic": {"interval": 3600, "price_amd": 490, "ad_enabled": False, "checks_per_day_limit": 24}, # 1 —á–∞—Å
    "Premium": {"interval": 900, "price_amd": 990, "ad_enabled": False, "checks_per_day_limit": 96}, # 15 –º–∏–Ω—É—Ç
    "Ultra": {"interval": 300, "price_amd": 1990, "ad_enabled": False, "checks_per_day_limit": 288} # 5 –º–∏–Ω—É—Ç
}
# –î–æ–±–∞–≤–∏–º —Å—é–¥–∞ –æ–ø—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–∑ handlers.py –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
# –≠—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥–ø–∏—Å–∫–∏.
# –í handlers.py FREQUENCY_OPTIONS –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –≤—Ä—É—á–Ω—É—é.

def get_subscription_keyboard(lang: str) -> InlineKeyboardMarkup:
    buttons = []
    for tier_key, tier_info in premium_tiers.items():
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        price_str = (f"({tier_info['price_amd']} {translations.get('amd_short', {}).get(lang, 'AMD')}/"
                     f"{translations.get('month_short', {}).get(lang, 'mo')})"
                     if tier_info['price_amd'] > 0 else f"({translations.get('free', {}).get(lang, 'Free')})")
        label = f"{translations.get(f'tier_{tier_key.lower()}', {}).get(lang, tier_key)} {price_str}"
        buttons.append([InlineKeyboardButton(text=label, callback_data=f"{CALLBACK_PREFIX_SUBSCRIBE}{tier_key}")])
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å" –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ, –≤–µ–¥—É—â—É—é –∫ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
    # buttons.append([InlineKeyboardButton(text=translations.get("pay_button", {}).get(lang, "Proceed to Payment"), callback_data=f"{CALLBACK_PREFIX_PAY}selected_tier")])
    return InlineKeyboardMarkup(buttons)

async def show_subscription_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    log_info(f"[smart_bot] show_subscription_options called for user {update.effective_user.id}")
    if not update.message: return
    lang = context.user_data.get(USER_DATA_LANG, "hy")
    
    # BUG FIX 1: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å lang –¥–ª—è —Ç–µ–∫—Å—Ç–∞ "–û–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"
    subscription_options_text = translations.get("subscription_options_title", {}).get(lang, "Subscription Options:")
    
    await update.message.reply_text(
        subscription_options_text, # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        reply_markup=get_subscription_keyboard(lang)
    )
    context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_SUBSCRIPTION_CHOICE
    log_info(f"[smart_bot] User {update.effective_user.id} step set to AWAITING_SUBSCRIPTION_CHOICE")

async def handle_subscription_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query or not query.data:
        log_error("[smart_bot] handle_subscription_callback: query or query.data is None")
        return

    await query.answer()
    user_id = query.from_user.id
    lang = context.user_data.get(USER_DATA_LANG, "hy")
    log_info(f"[smart_bot] handle_subscription_callback for user {user_id}, data: '{query.data}'")

    try:
        selected_tier_key = query.data.split(CALLBACK_PREFIX_SUBSCRIBE)[1]
        if selected_tier_key not in premium_tiers:
            log_error(f"Unknown tier key '{selected_tier_key}' selected by user {user_id}.")
            await query.edit_message_text(translations.get("error_invalid_tier", {}).get(lang, "Invalid subscription tier selected."))
            context.user_data[USER_DATA_STEP] = UserSteps.NONE
            return

        plan = premium_tiers[selected_tier_key]
        log_info(f"[smart_bot] User {user_id} selected tier: {selected_tier_key}, plan details: {plan}")

        current_s = user_settings.get(user_id, {})
        current_s.update({
            "frequency": plan["interval"],
            "is_premium": plan["price_amd"] > 0,
            "ads_enabled": plan["ad_enabled"],
            "current_tier": selected_tier_key
        })
        user_settings[user_id] = current_s
        await save_user_settings_async()
        log_info(f"[smart_bot] Settings saved for user {user_id} after subscription choice.")

        # BUG FIX 4: –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏
        tier_name_translated = translations.get(f'tier_{selected_tier_key.lower()}', {}).get(lang, selected_tier_key)
        interval_hours = plan['interval'] / 3600
        interval_minutes = plan['interval'] / 60

        if plan['interval'] >= 3600:
            interval_desc = f"{int(interval_hours)} {translations.get('hours_short', {}).get(lang, 'h')}"
        else:
            interval_desc = f"{int(interval_minutes)} {translations.get('minutes_short', {}).get(lang, 'min')}"

        success_message_key = "subscription_success_details" if plan["price_amd"] > 0 else "subscription_free_success_details"
        
        success_message_template = translations.get(success_message_key, {}).get(lang, "Subscription {plan} activated. Check interval: {interval}.")
        
        success_message = success_message_template.format(plan=tier_name_translated, interval=interval_desc)

        await query.edit_message_text(success_message)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ
        # if plan["price_amd"] > 0:
        #     await query.message.reply_text(translations.get("proceed_to_payment_prompt", {}).get(lang, "Please proceed to payment...")) # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã
        # else:
        #     await query.message.reply_text(text=translations.get("menu_returned", {}).get(lang, "Returned to menu."), reply_markup=reply_markup_for_lang(lang))
        
        await query.message.reply_text(text=translations.get("menu_returned", {}).get(lang, "Returned to main menu."), reply_markup=reply_markup_for_lang(lang))
        context.user_data[USER_DATA_STEP] = UserSteps.NONE

    except (IndexError, KeyError) as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–∫–∏ '{query.data}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        await query.edit_message_text(translations.get("error_generic", {}).get(lang, "Error processing selection."))
        context.user_data[USER_DATA_STEP] = UserSteps.NONE
    except Exception as e:
        log_error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_subscription_callback –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, data '{query.data}': {e}", exc=e)
        await query.edit_message_text(translations.get("error_generic", {}).get(lang, "A serious error occurred."))
        context.user_data[USER_DATA_STEP] = UserSteps.NONE


def normalize_address(addr: str) -> str:
    if not addr: return ""
    addr_low = addr.lower()
    addr_strip = addr_low.strip()
    addr_space = re.sub(r'\s+', ' ', addr_strip)
    replacements = {'—É–ª.': '—É–ª–∏—Ü–∞', '–ø—Ä.': '–ø—Ä–æ—Å–ø–µ–∫—Ç', '÷É.': '÷É’∏’≤’∏÷Å', 'st.': 'street', 'ave.': 'avenue', '’¢’¨’æ.': '’¢’∏÷Ç’¨’æ’°÷Ä', '–ø–µ—Ä.': '–ø–µ—Ä–µ—É–ª–æ–∫'}
    for old, new in replacements.items():
        addr_space = addr_space.replace(old, new)
    return addr_space

def fuzzy_match_address(user_address_normalized: str, entry_locations_normalized: List[str], threshold: float = 0.8) -> bool:
    for loc_norm in entry_locations_normalized:
        if user_address_normalized in loc_norm: return True # –ü—Ä—è–º–æ–µ –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
        if SequenceMatcher(None, user_address_normalized, loc_norm).ratio() >= threshold: return True
    return False

def match_address(user_id: int, entry: Dict[str, Any]) -> Optional[Dict[str, str]]:
    user_addrs = user_addresses.get(user_id, [])
    if not user_addrs: return None

    entry_streets_norm = [normalize_address(s) for s in entry.get("streets", [])]
    entry_regions_norm = [normalize_address(r) for r in entry.get("regions", [])]

    for address_obj in user_addrs:
        user_street_norm = normalize_address(address_obj["street"])
        user_region_norm = normalize_address(address_obj["region"])

        region_match_confirmed = False
        if entry_regions_norm: # –ï—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω—ã —Ä–µ–≥–∏–æ–Ω—ã
            if fuzzy_match_address(user_region_norm, entry_regions_norm, threshold=0.9):
                region_match_confirmed = True
        else: # –ï—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥–∏–æ–Ω—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ —Ä–µ–≥–∏–æ–Ω—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –µ—Å—Ç—å (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —É–ª–∏—Ü—É)
            region_match_confirmed = True

        if region_match_confirmed:
            if entry_streets_norm: # –ï—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω—ã —É–ª–∏—Ü—ã
                if fuzzy_match_address(user_street_norm, entry_streets_norm):
                    return address_obj
            else: # –ï—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –Ω–æ —Ä–µ–≥–∏–æ–Ω —Å–æ–≤–ø–∞–ª (–∏–ª–∏ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏)
                  # –≠—Ç–æ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ, –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ª–æ–∂–Ω—ã–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è–º, –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–∞—é—Ç –≤–µ—Å—å —Ä–µ–≥–∏–æ–Ω.
                  # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫, –Ω–æ —ç—Ç–æ –º–µ—Å—Ç–æ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏.
                  # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —É–ª–∏—Ü–µ, –µ—Å–ª–∏ —É–ª–∏—Ü—ã —É–∫–∞–∑–∞–Ω—ã.
                  # –ï—Å–ª–∏ –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ—Ç —É–ª–∏—Ü, —Ç–æ —ç—Ç–æ —à–∏—Ä–æ–∫–æ–º–∞—Å—à—Ç–∞–±–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ, –∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
                log_info(f"Address match for user {user_id} on region '{user_region_norm}' due to unspecified streets in entry.")
                return address_obj # –°—á–∏—Ç–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ–º, –µ—Å–ª–∏ —É–ª–∏—Ü—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∞ —Ä–µ–≥–∏–æ–Ω –ø–æ–¥–æ—à–µ–ª.
    return None

# --- –ê–°–ò–ù–•–†–û–ù–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ---
async def _save_json_async(filepath: Path, data: Any, lock: asyncio.Lock):
    async with lock:
        try:
            async with aiofiles.open(filepath, "w", encoding="utf-8") as f:
                await f.write(json.dumps(data, ensure_ascii=False, indent=2))
            log_info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filepath}")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ {filepath}: {e}")
            raise

async def _load_json_async(filepath: Path, lock: asyncio.Lock, default_factory=dict) -> Any:
    async with lock:
        if not await aios.path.exists(filepath):
            log_info(f"–§–∞–π–ª {filepath} –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return default_factory() if callable(default_factory) else default_factory
        try:
            async with aiofiles.open(filepath, "r", encoding="utf-8") as f:
                content = await f.read()
                return json.loads(content)
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ {filepath}: {e}. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return default_factory() if callable(default_factory) else default_factory

async def _perform_backup_async(filepath: Path):
    if not await aios.path.exists(filepath): return
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_file = config.backup_dir / f"{filepath.stem}.backup_{timestamp}{filepath.suffix}"
    try:
        # shutil.copy2 —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ executor'–µ
        loop = asyncio.get_event_loop()
        await loop.run_in_executor(None, shutil.copy2, filepath, backup_file)
        log_info(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è {filepath} –≤ {backup_file}")
    except Exception as e:
        log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è {filepath}: {e}")

async def _cleanup_old_backups_async(filename_prefix_stem: str):
    loop = asyncio.get_event_loop()
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã, –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å filename_prefix_stem –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç .backup_
    backup_files = await loop.run_in_executor(
        None,
        lambda: sorted(
            [f for f in config.backup_dir.iterdir() if f.name.startswith(filename_prefix_stem) and f.name.count(".backup_")],
            key=os.path.getmtime,
            reverse=True
        )
    )
    for old_backup in backup_files[config.max_backups_to_keep:]:
        try:
            await aios.remove(old_backup)
            log_info(f"–£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {old_backup}")
        except Exception as e:
            log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é {old_backup}: {e}")

async def save_user_settings_async():
    global user_settings
    filepath = config.settings_file
    await _perform_backup_async(filepath)
    try:
        data_to_save = {str(k): v for k, v in user_settings.items()} # –ö–ª—é—á–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏ –≤ JSON
        await _save_json_async(filepath, data_to_save, settings_file_lock)
        await _cleanup_old_backups_async(filepath.stem)
    except Exception as e: # –î–æ–±–∞–≤–∏–ª –∞—Ä–≥—É–º–µ–Ω—Ç 'e'
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filepath}, –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã: {e}")

async def load_user_settings_async():
    global user_settings, user_languages # user_languages —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å user_settings
    raw_settings = await _load_json_async(config.settings_file, settings_file_lock, default_factory=dict)
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ int –∏ –æ–±–Ω–æ–≤–ª—è–µ–º user_languages
    temp_user_settings = {}
    for k_str, v_dict in raw_settings.items():
        if k_str.isdigit():
            uid = int(k_str)
            temp_user_settings[uid] = v_dict
            if "lang" in v_dict: # –û–±–Ω–æ–≤–ª—è–µ–º user_languages –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                 user_languages[uid] = v_dict["lang"]
        else:
            log_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {k_str}")
    user_settings = temp_user_settings
    log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è {len(user_settings)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")


async def save_tracked_data_async():
    global user_addresses, user_notified_headers
    addr_filepath = config.address_file
    await _perform_backup_async(addr_filepath)
    try:
        addr_data_to_save = {str(k): v for k, v in user_addresses.items()}
        await _save_json_async(addr_filepath, addr_data_to_save, address_file_lock)
        await _cleanup_old_backups_async(addr_filepath.stem)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {addr_filepath}: {e}")

    notif_filepath = config.notified_file
    await _perform_backup_async(notif_filepath)
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º set –≤ list –¥–ª—è JSON-—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        notif_data_to_save = {str(k): list(v) for k, v in user_notified_headers.items()}
        await _save_json_async(notif_filepath, notif_data_to_save, notified_file_lock)
        await _cleanup_old_backups_async(notif_filepath.stem)
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {notif_filepath}: {e}")

async def load_tracked_data_async():
    global user_addresses, user_notified_headers
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
    raw_addresses = await _load_json_async(config.address_file, address_file_lock, default_factory=dict)
    temp_user_addresses = {}
    for uid_str, items_list in raw_addresses.items():
        if not uid_str.isdigit():
            log_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ –∞–¥—Ä–µ—Å–æ–≤: {uid_str}")
            continue
        uid_int = int(uid_str)
        valid_items = []
        if isinstance(items_list, list):
            for item in items_list:
                if isinstance(item, dict) and "street" in item and "region" in item:
                    valid_items.append(item)
                # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –≥–¥–µ –∞–¥—Ä–µ—Å –±—ã–ª –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–æ–π
                elif isinstance(item, str):
                    valid_items.append({"region": "’â’Ω’°’∞’¥’°’∂’æ’°’Æ", "street": item}) # –†–µ–≥–∏–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    log_info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid_int}: {item}")
                else:
                    log_info(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid_int}: {item}")
            temp_user_addresses[uid_int] = valid_items
        else:
            log_error(f"–≠–ª–µ–º–µ–Ω—Ç—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid_int} –Ω–µ —è–≤–ª—è—é—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {items_list}")
            temp_user_addresses[uid_int] = [] # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    user_addresses = temp_user_addresses
    log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–¥—Ä–µ—Å–∞ –¥–ª—è {len(user_addresses)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    raw_notified = await _load_json_async(config.notified_file, notified_file_lock, default_factory=dict)
    temp_user_notified_headers = {}
    for k_str, v_list in raw_notified.items():
        if not k_str.isdigit():
            log_error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–π–ª–µ –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {k_str}")
            continue
        if isinstance(v_list, list): # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ v_list - —ç—Ç–æ —Å–ø–∏—Å–æ–∫
            temp_user_notified_headers[int(k_str)] = set(v_list)
        else:
            log_error(f"–ò—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {k_str} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {v_list}")
            temp_user_notified_headers[int(k_str)] = set() # –ü—É—Å—Ç–æ–µ –º–Ω–æ–∂–µ—Å—Ç–≤–æ, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
    user_notified_headers = temp_user_notified_headers
    log_info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {len(user_notified_headers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ë–û–¢–ê ---
async def process_utility_data(user_id: int, context: ContextTypes.DEFAULT_TYPE, data: List[Dict], utility_type: str, emoji: str, lang: str):
    if not data: return

    for entry in data:
        if not entry or not isinstance(entry, dict):
            log_info(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–µ—Ä–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤ –¥–∞–Ω–Ω—ã—Ö {utility_type}: {entry}")
            continue

        header_parts = [
            entry.get('published', 'N/A'), # –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
            entry.get('start_date', 'N/A'),
            entry.get('start_time', 'N/A'),
            utility_type
        ]
        # –°–æ–±–∏—Ä–∞–µ–º —É–ª–∏—Ü—ã –∏ —Ä–µ–≥–∏–æ–Ω—ã –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –µ–≥–æ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–≥—É—Ç –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –Ω–æ —Ä–∞–∑–Ω—ã–µ —É–ª–∏—Ü—ã/—Ä–µ–≥–∏–æ–Ω—ã
        streets_str = ",".join(sorted(entry.get("streets", [])))
        regions_str = ",".join(sorted(entry.get("regions", [])))
        header_parts.append(streets_str)
        header_parts.append(regions_str)
        
        header = " | ".join(header_parts)


        if user_id in user_notified_headers and header in user_notified_headers[user_id]:
            log_info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º '{header}' —É–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            continue # –£–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± —ç—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏

        matched_address_obj = match_address(user_id, entry)
        if matched_address_obj:
            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å —Ñ–æ–ª–±—ç–∫–∞–º–∏
                type_off_key = f"{utility_type}_off"
                type_off_text = translations.get(type_off_key, {}).get(lang, utility_type.capitalize())

                msg_parts = [
                    f"{emoji} *{type_off_text}* {escape_markdown(matched_address_obj['region'], 2)} - {escape_markdown(matched_address_obj['street'], 2)}",
                    f"üìÖ *{translations.get('date_time_label', {}).get(lang, 'Period')}:* {escape_markdown(entry.get('start_date', 'N/A'),2)} {escape_markdown(entry.get('start_time', 'N/A'),2)} ‚Üí {escape_markdown(entry.get('end_date', 'N/A'),2)} {escape_markdown(entry.get('end_time', 'N/A'),2)}",
                ]
                if entry.get('regions'):
                     msg_parts.append(f"üìç *{translations.get('locations_label', {}).get(lang, 'Locations')}:* {escape_markdown(', '.join(entry.get('regions', [])),2)}")
                if entry.get('streets'):
                     msg_parts.append(f"  *‚îî {translations.get('streets_label', {}).get(lang, 'Streets')}:* {escape_markdown(', '.join(entry.get('streets')),2)}")
                
                msg_parts.extend([
                    f"‚öôÔ∏è *{translations.get('status_label', {}).get(lang, 'Status')}:* {escape_markdown(entry.get('status', 'N/A'),2)}",
                    f"üóì *{translations.get('published_label', {}).get(lang, 'Published')}:* {escape_markdown(entry.get('published', 'N/A'),2)}"
                ])
                msg = "\n\n".join(msg_parts)

                await context.bot.send_message(chat_id=user_id, text=msg, parse_mode=ParseMode.MARKDOWN_V2)
                user_notified_headers.setdefault(user_id, set()).add(header)
                await save_tracked_data_async() # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ set
                log_info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ({utility_type}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –ø–æ –∞–¥—Ä–µ—Å—É {matched_address_obj['street']}")
            except KeyError as ke: # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –µ—Å–ª–∏ –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                log_error(f"–û—à–∏–±–∫–∞ –∫–ª—é—á–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ({utility_type}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {ke}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ translations.py.")
            except Exception as e:
                log_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ ({utility_type}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc=e)


async def check_site_for_user(user_id: int, context: ContextTypes.DEFAULT_TYPE):
    # –Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user_id, {}).get("lang", "hy")

    if not user_addresses.get(user_id):
        log_info(f"–ù–µ—Ç –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return

    log_info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        water_data, gas_data, electric_data = await asyncio.gather(
            parse_all_water_announcements_async(),
            parse_all_gas_announcements_async(),
            parse_all_electric_announcements_async(),
            return_exceptions=True # –ß—Ç–æ–±—ã –æ–¥–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∞ –≤—Å–µ
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –æ—à–∏–±–æ–∫
        if isinstance(water_data, Exception):
            log_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {water_data}")
            water_data = []
        if isinstance(gas_data, Exception):
            log_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≥–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {gas_data}")
            gas_data = []
        if isinstance(electric_data, Exception):
            log_error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {electric_data}")
            electric_data = []

    except Exception as e: # –û–±—â–∞—è –æ—à–∏–±–∫–∞, –µ—Å–ª–∏ gather —Å–∞–º –ø–æ —Å–µ–±–µ –ø–∞–¥–∞–µ—Ç
        log_error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã—Ö —É—Å–ª—É–≥
    await process_utility_data(user_id, context, water_data, "water", "üö∞", lang)
    await process_utility_data(user_id, context, gas_data, "gas", "üî•", lang)
    await process_utility_data(user_id, context, electric_data, "üí°", "electric", lang)


async def is_shutdown_for_address_now(address_street: str, address_region: str) -> List[str]:
    normalized_street = normalize_address(address_street)
    normalized_region = normalize_address(address_region)
    active_shutdown_types: List[str] = [] # –Ø–≤–Ω–∞—è —Ç–∏–ø–∏–∑–∞—Ü–∏—è

    # –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    def _check_match(entry_data: List[Dict], utility_type: str):
        for entry in entry_data:
            if not entry or not isinstance(entry, dict): continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏

            entry_streets_norm = [normalize_address(s) for s in entry.get("streets", [])]
            entry_regions_norm = [normalize_address(r) for r in entry.get("regions", [])]

            region_match_confirmed = False
            if entry_regions_norm:
                if fuzzy_match_address(normalized_region, entry_regions_norm, threshold=0.9):
                    region_match_confirmed = True
            else: # –ï—Å–ª–∏ —Ä–µ–≥–∏–æ–Ω—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ —Ä–µ–≥–∏–æ–Ω—É –µ—Å—Ç—å
                region_match_confirmed = True
            
            if region_match_confirmed:
                if entry_streets_norm: # –ï—Å–ª–∏ —É–ª–∏—Ü—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ —É–∫–∞–∑–∞–Ω—ã
                     if fuzzy_match_address(normalized_street, entry_streets_norm):
                        if utility_type not in active_shutdown_types:
                            active_shutdown_types.append(utility_type)
                        return # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ–¥–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
                # else: # –ï—Å–ª–∏ —É–ª–∏—Ü—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –Ω–æ —Ä–µ–≥–∏–æ–Ω —Å–æ–≤–ø–∞–ª
                #     # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞. –î–æ–±–∞–≤–ª—è–µ–º —Ç–∏–ø.
                #     if utility_type not in active_shutdown_types:
                #         active_shutdown_types.append(utility_type)
                #     return # –û—Å—Ç–∞–≤–∏–ª –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –µ—Å–ª–∏ —É–ª–∏—Ü—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏.
                #              # –¢—Ä–µ–±—É–µ—Ç –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏.

    try:
        water_data, gas_data, electric_data = await asyncio.gather(
            parse_all_water_announcements_async(),
            parse_all_gas_announcements_async(),
            parse_all_electric_announcements_async(),
            return_exceptions=True
        )

        if not isinstance(water_data, Exception) and water_data: _check_match(water_data, "water")
        if not isinstance(gas_data, Exception) and gas_data: _check_match(gas_data, "gas")
        if not isinstance(electric_data, Exception) and electric_data: _check_match(electric_data, "electric")

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –≤ is_shutdown_for_address_now –¥–ª—è {address_region}, {address_street}: {e}")

    return active_shutdown_types

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –¢–ï–õ–ï–ì–†–ê–ú ---
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_info(f"[smart_bot] /start command from user {user.id if user else 'Unknown'}")
    if not user or not update.message: return

    if is_user_rate_limited(user.id):
        log_info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –≤ /start")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞, –µ—Å–ª–∏ —ç—Ç–æ –Ω—É–∂–Ω–æ
        # await update.message.reply_text("Rate limit exceeded. Please try again later.")
        return

    # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Å–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö)
    if USER_DATA_LANG not in context.user_data and user.id not in user_settings:
        await update.message.reply_text(
            translations.get("choose_language", {}).get("hy", "‘∏’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂:") + "\n" + # –ù–∞ –∞—Ä–º—è–Ω—Å–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            translations.get("choose_language", {}).get("ru", "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:") + "\n" +
            translations.get("choose_language", {}).get("en", "Choose language:"),
            reply_markup=language_keyboard
        )
        context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_LANGUAGE_CHOICE
    else:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –µ—Å—Ç—å –≤ user_data –∏–ª–∏ user_settings, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user.id, {}).get("lang", "hy")
        context.user_data[USER_DATA_LANG] = lang # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —è–∑—ã–∫ –≤ user_data –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏

        await update.message.reply_text(
            translations.get("start_text", {}).get(lang, "Hello! Choose an action."),
            reply_markup=reply_markup_for_lang(lang)
        )
        context.user_data[USER_DATA_STEP] = UserSteps.NONE

async def address_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_info(f"[smart_bot] address_list_command from user {user.id if user else 'Unknown'}")
    if not user or not update.message: return
    user_id = user.id

    lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user_id, {}).get("lang", "hy")
    if is_user_rate_limited(user_id): return

    addresses = user_addresses.get(user_id, [])
    if addresses:
        address_lines = [f"üìç {a['region']} ‚Äî {a['street']}" for a in addresses] # –î–æ–±–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏
        text_to_send = translations.get("address_list", {}).get(lang, "Your addresses:") + "\n" + "\n".join(address_lines)
    else:
        text_to_send = translations.get("no_addresses", {}).get(lang, "No addresses added yet.")

    await update.message.reply_text(text_to_send, reply_markup=reply_markup_for_lang(lang))
    context.user_data[USER_DATA_STEP] = UserSteps.NONE

async def show_statistics_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_info(f"[smart_bot] show_statistics_command from user {user.id if user else 'Unknown'}")
    if not user or not update.message: return
    user_id = user.id

    lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user_id, {}).get("lang", "hy")
    if is_user_rate_limited(user_id):
        log_info(f"[smart_bot] Rate limit for stats user {user_id}")
        return

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–ø—Ä–∏–º–µ—Ä)
    active_users_with_addresses = len(user_addresses) # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∏–º –∞–¥—Ä–µ—Å–æ–º
    total_addresses_tracked = sum(len(addrs) for addrs in user_addresses.values())
    uptime_seconds = time() - start_time
    uptime_days = int(uptime_seconds // 86400)
    uptime_hours = int((uptime_seconds % 86400) // 3600)
    uptime_minutes = int((uptime_seconds % 3600) // 60)
    
    uptime_str_parts = []
    if uptime_days > 0: uptime_str_parts.append(f"{uptime_days} {translations.get('stats_days_unit', {}).get(lang, 'd')}")
    if uptime_hours > 0: uptime_str_parts.append(f"{uptime_hours} {translations.get('stats_hours_unit', {}).get(lang, 'h')}")
    if uptime_minutes > 0 or not uptime_str_parts : uptime_str_parts.append(f"{uptime_minutes} {translations.get('stats_minutes_unit', {}).get(lang, 'm')}")
    uptime_formatted = " ".join(uptime_str_parts)


    user_specific_addresses = len(user_addresses.get(user_id, []))
    user_specific_notifications_sent = len(user_notified_headers.get(user_id, set())) # –°–∫–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    stats_text = (
        f"üìä {translations.get('statistics_title', {}).get(lang, 'Bot Statistics')}\n\n"
        f"üïí {translations.get('stats_uptime', {}).get(lang, 'Uptime')}: {uptime_formatted}\n"
        f"üë• {translations.get('stats_users_with_addresses', {}).get(lang, 'Users with addresses')}: {active_users_with_addresses}\n"
        f"üìç {translations.get('stats_total_addresses', {}).get(lang, 'Total addresses tracked')}: {total_addresses_tracked}\n\n"
        f"üë§ {translations.get('stats_your_info_title', {}).get(lang, 'Your Information')}:\n"
        f"üè† {translations.get('stats_your_addresses', {}).get(lang, 'Your addresses')}: {user_specific_addresses}\n"
        f"üì® {translations.get('stats_your_notifications_sent', {}).get(lang, 'Notifications you received')}: {user_specific_notifications_sent}"
    )
    await update.message.reply_text(stats_text, reply_markup=reply_markup_for_lang(lang))
    context.user_data[USER_DATA_STEP] = UserSteps.NONE

async def show_help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_info(f"[smart_bot] show_help_command from user {user.id if user else 'Unknown'}")
    if not user or not update.message: return
    user_id = user.id

    lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user_id, {}).get("lang", "hy")
    if is_user_rate_limited(user_id):
        log_info(f"[smart_bot] Rate limit for help user {user_id}")
        return

    help_text_key = "help_text_main"
    # BUG FIX 3: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–ª–±—ç–∫, –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    default_help_unavailable = translations.get("help_unavailable", {}).get(lang, "Help section is not yet available in your language.")
    raw_help_message = translations.get(help_text_key, {}).get(lang, default_help_unavailable)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å–∏–º–≤–æ–ª–æ–≤
    escaped_help_message = escape_markdown(raw_help_message, version=2)

    try:
        await update.message.reply_text(
            escaped_help_message,
            reply_markup=reply_markup_for_lang(lang),
            parse_mode=ParseMode.MARKDOWN_V2
        )
    except Exception as e: # –ï—Å–ª–∏ –¥–∞–∂–µ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ)
        log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–º–æ—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–¥–∞–∂–µ –ø–æ—Å–ª–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è): {e}", exc=e)
        # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await update.message.reply_text(raw_help_message, reply_markup=reply_markup_for_lang(lang))

    context.user_data[USER_DATA_STEP] = UserSteps.NONE

async def change_language_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_info(f"[smart_bot] change_language_command from user {user.id if user else 'Unknown'}")
    if not user or not update.message : return
    user_id = user.id # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id

    if is_user_rate_limited(user_id): return

    # BUG FIX 2: –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —è–∑—ã–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user_id, {}).get("lang", "hy")
    prompt_text = translations.get("choose_language_prompt_button", {}).get(current_lang, "Please select your new language using the buttons below:")

    await update.message.reply_text(prompt_text, reply_markup=language_keyboard)
    context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_LANGUAGE_CHOICE


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –ò –î–ò–ê–õ–û–ì–û–í ---
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message
    if not user or not message or not message.text: return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: user_data (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è) -> user_settings (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ) -> –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π 'hy'
    lang = context.user_data.get(USER_DATA_LANG) or user_settings.get(user.id, {}).get("lang", "hy")
    # –ï—Å–ª–∏ —è–∑—ã–∫ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ user_settings, —Å–æ—Ö—Ä–∞–Ω–∏–º –µ–≥–æ –≤ user_data –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
    if USER_DATA_LANG not in context.user_data and user.id in user_settings:
        context.user_data[USER_DATA_LANG] = lang
        
    current_step = context.user_data.get(USER_DATA_STEP, UserSteps.NONE)
    text = message.text.strip()
    log_info(f"[smart_bot] handle_text_message: user={user.id}, text='{text}', lang='{lang}', current_step='{current_step}'")

    if is_user_rate_limited(user.id):
        log_info(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        # await message.reply_text(translations.get("error_rate_limit", {}).get(lang, "Too many requests. Please wait."))
        return

    if not validate_user_input(text):
        await message.reply_text(translations.get("error_invalid_input", {}).get(lang, "Invalid input. Please try again."))
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (—Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –∏–ª–∏ —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞)
    if current_step == UserSteps.AWAITING_LANGUAGE_CHOICE:
        log_info(f"[smart_bot] handle_text_message: Processing AWAITING_LANGUAGE_CHOICE for text '{text}'")
        if text in languages: # '–†—É—Å—Å–∫–∏–π', 'English', '’Ä’°’µ’•÷Ä’•’∂'
            selected_lang_code = languages[text] # 'ru', 'en', 'hy'
            context.user_data[USER_DATA_LANG] = selected_lang_code
            
            current_user_s = user_settings.get(user.id, {})
            current_user_s["lang"] = selected_lang_code
            user_settings[user.id] = current_user_s
            await save_user_settings_async() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

            await message.reply_text(
                translations.get("language_set", {}).get(selected_lang_code, "Language set!"),
                reply_markup=reply_markup_for_lang(selected_lang_code)
            )
            context.user_data[USER_DATA_STEP] = UserSteps.NONE
            log_info(f"[smart_bot] Language set to '{selected_lang_code}' for user {user.id}. Step reset to NONE.")
        else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
            # –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª *–¥–æ* –ø–æ–ø—ã—Ç–∫–∏ —Å–º–µ–Ω—ã, –∏–ª–∏ –Ω–∞ –≤—Å–µ—Ö, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥
            prompt_lang_for_choice = lang # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if USER_DATA_LANG not in context.user_data and user.id not in user_settings : # –°–∞–º—ã–π –ø–µ—Ä–≤—ã–π –≤—Ö–æ–¥
                 await message.reply_text(
                    translations.get("choose_language", {}).get("hy", "‘∏’∂’ø÷Ä’•÷Ñ ’¨’•’¶’∏÷Ç’∂:") + "\n" +
                    translations.get("choose_language", {}).get("ru", "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:") + "\n" +
                    translations.get("choose_language", {}).get("en", "Choose language:"),
                    reply_markup=language_keyboard)
            else: # –ü–æ–ø—ã—Ç–∫–∞ —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫, –Ω–æ –≤–≤–µ–ª —Ç–µ–∫—Å—Ç
                 await message.reply_text(
                    translations.get("choose_language_prompt_button", {}).get(prompt_lang_for_choice, "Please use buttons to select language."),
                    reply_markup=language_keyboard)
        return # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
    if text == translations.get("cancel", {}).get(lang, "FallbackCancel"): # –î–æ–±–∞–≤–ª–µ–Ω —Ñ–æ–ª–±—ç–∫ –¥–ª—è 'cancel'
        log_info(f"[smart_bot] handle_text_message: Cancel button pressed by user {user.id}")
        await message.reply_text(
            translations.get("cancelled", {}).get(lang, "Action cancelled."),
            reply_markup=reply_markup_for_lang(lang)
        )
        context.user_data[USER_DATA_STEP] = UserSteps.NONE
        context.user_data.pop(USER_DATA_SELECTED_REGION, None) # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω, –µ—Å–ª–∏ –±—ã–ª
        return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ –¥—Ä—É–≥–∏—Ö —à–∞–≥–æ–≤
    # (–°–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º .get –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤)
    if current_step == UserSteps.NONE:
        log_info(f"[smart_bot] handle_text_message: current_step is NONE, processing main menu button '{text}'")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–µ—Ä–µ–≤–æ–¥–æ–≤, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å KeyError
        if text == translations.get("add_address_btn", {}).get(lang):
            await message.reply_text(translations.get("choose_region", {}).get(lang, "Choose region:"), reply_markup=get_region_keyboard(lang))
            context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_REGION
        elif text == translations.get("remove_address_btn", {}).get(lang):
            if user_addresses.get(user.id):
                await message.reply_text(translations.get("enter_address_to_remove_prompt", {}).get(lang, "Which address to remove? (Enter street name)"), reply_markup=ReplyKeyboardMarkup([[translations.get("cancel", {}).get(lang, "Cancel")]], resize_keyboard=True, one_time_keyboard=True))
                context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_ADDRESS_TO_REMOVE
            else:
                await message.reply_text(translations.get("no_addresses", {}).get(lang, "No addresses yet."), reply_markup=reply_markup_for_lang(lang))
        elif text == translations.get("show_addresses_btn", {}).get(lang):
            await address_list_command(update, context)
        elif text == translations.get("clear_all_btn", {}).get(lang):
            if user_addresses.get(user.id):
                confirm_keyboard = ReplyKeyboardMarkup([
                    [KeyboardButton(translations.get("yes", {}).get(lang, "Yes")), KeyboardButton(translations.get("no", {}).get(lang, "No"))]
                ], resize_keyboard=True, one_time_keyboard=True)
                await message.reply_text(translations.get("confirm_clear", {}).get(lang, "Confirm clear all addresses?"), reply_markup=confirm_keyboard)
                context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_CLEAR_ALL_CONFIRMATION
            else:
                await message.reply_text(translations.get("no_addresses", {}).get(lang, "No addresses yet."), reply_markup=reply_markup_for_lang(lang))
        elif text == translations.get("check_address_btn", {}).get(lang):
            await message.reply_text(translations.get("enter_address_to_check_street", {}).get(lang, "Enter street to check:"), reply_markup=ReplyKeyboardMarkup([[translations.get("cancel", {}).get(lang, "Cancel")]], resize_keyboard=True, one_time_keyboard=True))
            context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_ADDRESS_TO_CHECK
        elif text == translations.get("change_language_btn", {}).get(lang):
            await change_language_command(update, context)
        elif text == translations.get("statistics_btn", {}).get(lang):
            await show_statistics_command(update, context)
        elif text == translations.get("help_btn", {}).get(lang):
            await show_help_command(update, context)
        elif text == translations.get("subscription_btn", {}).get(lang):
            await show_subscription_options(update, context) # –≠—Ç–æ –ø–æ–∫–∞–∂–µ—Ç InlineKeyboard
        elif text == translations.get("set_frequency_btn", {}).get(lang):
            log_info(f"[smart_bot] 'Set Frequency' button pressed by user {user.id}. Calling set_frequency_command.")
            await set_frequency_command(update, context) # –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∏–∑ handlers.py
        else:
            log_info(f"[smart_bot] Unknown command/button '{text}' from user {user.id} in step NONE.")
            await message.reply_text(translations.get("unknown_command", {}).get(lang, "Unknown command."), reply_markup=reply_markup_for_lang(lang))
        return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–æ–≤ –¥–∏–∞–ª–æ–≥–∞ ---
    if current_step == UserSteps.AWAITING_REGION:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ä–µ–≥–∏–æ–Ω (—Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π —Ä–µ–≥–∏–æ–Ω –≤ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ
        current_regions_map = {"hy": regions_hy, "ru": regions_ru, "en": regions_en}
        if text not in current_regions_map.get(lang, []):
            await message.reply_text(translations.get("error_invalid_region_selection", {}).get(lang, "Invalid region. Please choose from buttons."), reply_markup=get_region_keyboard(lang))
            return # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —Ç–æ–º –∂–µ —à–∞–≥–µ

        context.user_data[USER_DATA_SELECTED_REGION] = text # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
        await message.reply_text(
            translations.get("enter_street", {}).get(lang, "Please enter street name:"),
            reply_markup=ReplyKeyboardMarkup([[translations.get("cancel", {}).get(lang, "Cancel")]], resize_keyboard=True, one_time_keyboard=True)
        )
        context.user_data[USER_DATA_STEP] = UserSteps.AWAITING_STREET

    elif current_step == UserSteps.AWAITING_STREET:
        region = context.user_data.get(USER_DATA_SELECTED_REGION)
        if not region:
            await message.reply_text(translations.get("error_region_not_selected", {}).get(lang, "Region not selected. Please start over."), reply_markup=reply_markup_for_lang(lang))
            context.user_data[USER_DATA_STEP] = UserSteps.NONE
            return

        street = text # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã
        user_addresses.setdefault(user.id, [])
        normalized_new_street = normalize_address(street)
        normalized_new_region = normalize_address(region)

        is_duplicate = any(
            normalize_address(addr["street"]) == normalized_new_street and \
            normalize_address(addr["region"]) == normalized_new_region
            for addr in user_addresses[user.id]
        )

        if is_duplicate:
            await message.reply_text(
                translations.get("address_exists", {}).get(lang, "Address '{address}' already exists.").format(address=f"{region}, {street}"),
                reply_markup=reply_markup_for_lang(lang)
            )
        else:
            user_addresses[user.id].append({"region": region, "street": street})
            await save_tracked_data_async()
            await message.reply_text(
                translations.get("address_added", {}).get(lang, "Address '{address}' added.").format(address=f"{region}, {street}"),
                reply_markup=reply_markup_for_lang(lang)
            )
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
            shutdown_types = await is_shutdown_for_address_now(street, region)
            if shutdown_types:
                 types_str = ", ".join([translations.get(f"{stype}_off_short", {}).get(lang, stype.capitalize()) for stype in shutdown_types])
                 await message.reply_text(translations.get("shutdown_found_for_new_address", {}).get(lang, "‚ÑπÔ∏è Active outages for new address: {types}.").format(types=types_str))
            else:
                 await message.reply_text(translations.get("no_shutdowns_for_new_address", {}).get(lang, "‚úÖ No active outages found for the new address."))

        context.user_data.pop(USER_DATA_SELECTED_REGION, None) # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
        context.user_data[USER_DATA_STEP] = UserSteps.NONE

    elif current_step == UserSteps.AWAITING_ADDRESS_TO_REMOVE:
        address_to_remove_text = text # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —É–ª–∏—Ü—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        current_user_addresses = user_addresses.get(user.id, [])
        normalized_address_to_remove = normalize_address(address_to_remove_text)
        address_found_to_remove = None
        
        # –ò—â–µ–º –∞–¥—Ä–µ—Å –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é —É–ª–∏—Ü—ã (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É–ª–∏—Ü—ã —É–Ω–∏–∫–∞–ª—å–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–Ω–∞–µ—Ç, —á—Ç–æ —É–¥–∞–ª—è–µ—Ç)
        # –î–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —É–ª–∏—Ü—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö.
        best_match_addr = None
        highest_ratio = 0.0
        
        for addr_obj in current_user_addresses:
            norm_street = normalize_address(addr_obj["street"])
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π —É–ª–∏—Ü—ã
            if norm_street == normalized_address_to_remove:
                address_found_to_remove = addr_obj
                break
            # –ï—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–µ—Ç, –∏—â–µ–º –Ω–µ—á–µ—Ç–∫–æ–µ
            ratio = SequenceMatcher(None, normalized_address_to_remove, norm_street).ratio()
            if ratio > highest_ratio:
                highest_ratio = ratio
                best_match_addr = addr_obj
        
        if not address_found_to_remove and best_match_addr and highest_ratio > 0.7: # –ü–æ—Ä–æ–≥ –¥–ª—è –Ω–µ—á–µ—Ç–∫–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            address_found_to_remove = best_match_addr
            log_info(f"Fuzzy matched address for removal: '{address_to_remove_text}' with '{best_match_addr['street']}' (ratio: {highest_ratio})")


        if address_found_to_remove:
            current_user_addresses.remove(address_found_to_remove)
            if not current_user_addresses: # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –ø—É—Å—Ç –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                user_addresses.pop(user.id, None)
            else:
                user_addresses[user.id] = current_user_addresses
            await save_tracked_data_async()
            await message.reply_text(
                translations.get("address_removed", {}).get(lang, "Address '{address}' removed.").format(address=f"{address_found_to_remove['region']}, {address_found_to_remove['street']}"),
                reply_markup=reply_markup_for_lang(lang)
            )
        else:
            await message.reply_text(
                translations.get("address_not_found_to_remove",{}).get(lang,"Address to remove not found: {address}").format(address=address_to_remove_text),
                reply_markup=reply_markup_for_lang(lang)
            )
        context.user_data[USER_DATA_STEP] = UserSteps.NONE

    elif current_step == UserSteps.AWAITING_CLEAR_ALL_CONFIRMATION:
        if text == translations.get("yes", {}).get(lang, "Yes"):
            user_addresses.pop(user.id, None) # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_notified_headers.pop(user.id, None) # –ò –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            await save_tracked_data_async()
            await message.reply_text(translations.get("all_addresses_cleared",{}).get(lang, "All addresses cleared."), reply_markup=reply_markup_for_lang(lang))
        elif text == translations.get("no", {}).get(lang, "No"):
            await message.reply_text(translations.get("cancelled", {}).get(lang, "Cancelled."), reply_markup=reply_markup_for_lang(lang))
        else: # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –∫—Ä–æ–º–µ "–î–∞" –∏–ª–∏ "–ù–µ—Ç"
            await message.reply_text(translations.get("please_confirm_yes_no", {}).get(lang, "Please confirm (Yes/No)."), reply_markup=reply_markup_for_lang(lang))
            return # –û—Å—Ç–∞–µ–º—Å—è –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        context.user_data[USER_DATA_STEP] = UserSteps.NONE

    elif current_step == UserSteps.AWAITING_ADDRESS_TO_CHECK:
        street_to_check = text
        # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–≥–∏–æ–Ω –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –ï—Ä–µ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_region_to_check = "‘µ÷Ä÷á’°’∂" # –ê—Ä–º—è–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö
        if lang == "ru": default_region_to_check = "–ï—Ä–µ–≤–∞–Ω"
        elif lang == "en": default_region_to_check = "Yerevan"

        if user_addresses.get(user.id) and user_addresses[user.id]:
            default_region_to_check = user_addresses[user.id][0]["region"] # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–≥–∏–æ–Ω –ø–µ—Ä–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞

        log_info(f"Checking immediate shutdown for: Street='{street_to_check}', Region='{default_region_to_check}'")
        shutdown_types = await is_shutdown_for_address_now(street_to_check, default_region_to_check)

        if shutdown_types:
            types_str = ", ".join([translations.get(f"{stype}_off_short", {}).get(lang, stype.capitalize()) for stype in shutdown_types])
            await message.reply_text(
                translations.get("shutdown_check_found", {}).get(lang, "‚ö†Ô∏è Outages found for '{address}': {types}.").format(address=f"{default_region_to_check}, {street_to_check}", types=types_str),
                reply_markup=reply_markup_for_lang(lang)
            )
        else:
            await message.reply_text(
                translations.get("shutdown_check_not_found", {}).get(lang, "‚úÖ No outages found for '{address}'.").format(address=f"{default_region_to_check}, {street_to_check}"),
                reply_markup=reply_markup_for_lang(lang)
            )
        context.user_data[USER_DATA_STEP] = UserSteps.NONE

    elif current_step == UserSteps.AWAITING_FREQUENCY_CHOICE:
        log_info(f"[smart_bot] Calling handle_frequency_choice from handlers.py for user {user.id}, text '{text}'")
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∏–∑ handlers.py –¥–æ–ª–∂–Ω–∞ —Å–∞–º–∞ —Å–±—Ä–æ—Å–∏—Ç—å —à–∞–≥
        await handle_frequency_choice(update, context)

    elif current_step == UserSteps.AWAITING_SUBSCRIPTION_CHOICE:
        log_info(f"[smart_bot] User {user.id} is in AWAITING_SUBSCRIPTION_CHOICE but sent text '{text}'. This step expects a CallbackQuery.")
        await message.reply_text(
            translations.get("use_inline_buttons_for_subscription", {}).get(lang, "Please use the buttons under the message to choose a subscription."),
            reply_markup=reply_markup_for_lang(lang) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        )
        context.user_data[USER_DATA_STEP] = UserSteps.NONE # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥

    else: # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ –∏–ª–∏ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø—Ä–∏–π—Ç–∏ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ
        log_info(f"[smart_bot] Unhandled step {current_step} for user {user.id} with text '{text}'. Resetting step to NONE.")
        await message.reply_text(translations.get("unknown_command", {}).get(lang, "Unknown state. Returning to menu."), reply_markup=reply_markup_for_lang(lang))
        context.user_data[USER_DATA_STEP] = UserSteps.NONE
    return

# --- –ü–ï–†–ò–û–î–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò ---
async def periodic_site_check_job(context: ContextTypes.DEFAULT_TYPE):
    now = time()
    user_ids_with_settings = list(user_settings.keys()) # –ö–æ–ø–∏—Ä—É–µ–º –∫–ª—é—á–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞—Ä—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    log_info(f"[smart_bot] periodic_site_check_job running for {len(user_ids_with_settings)} users with settings.")

    active_checks = 0
    for user_id in user_ids_with_settings:
        if not user_addresses.get(user_id): # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –∞–¥—Ä–µ—Å–æ–≤
            continue

        current_user_s = user_settings.get(user_id, {}) # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–∑ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        default_frequency = premium_tiers.get("Free", {}).get("interval", 21600) # 6 —á–∞—Å–æ–≤
        frequency_seconds = current_user_s.get("frequency", default_frequency)

        if last_check_time.get(user_id, 0) + frequency_seconds <= now:
            log_info(f"–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (—á–∞—Å—Ç–æ—Ç–∞: {frequency_seconds}s)")
            try:
                await check_site_for_user(user_id, context)
                last_check_time[user_id] = now # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                active_checks += 1
            except Exception as e:
                log_error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}", exc=e)
        
        # –õ–æ–≥–∏–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã (–ø—Ä–∏–º–µ—Ä)
        # if current_user_s.get("ads_enabled", premium_tiers.get("Free", {}).get("ad_enabled", True)):
        #     if last_ad_time.get(user_id, 0) + config.ad_interval_seconds <= now:
        #         lang = current_user_s.get("lang", "hy")
        #         ad_message = translations.get("ad_message_example", {}).get(lang, "This is an ad! Consider upgrading for an ad-free experience.")
        #         try:
        #             await context.bot.send_message(chat_id=user_id, text=ad_message)
        #             last_ad_time[user_id] = now
        #             log_info(f"–ü–æ–∫–∞–∑–∞–Ω–∞ —Ä–µ–∫–ª–∞–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        #         except Exception as e:
        #             log_error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    log_info(f"[smart_bot] periodic_site_check_job completed. Active checks performed: {active_checks}")

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def post_init_hook(application: Application):
    log_info("[smart_bot] Bot post_init_hook: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    await load_user_settings_async()
    await load_tracked_data_async()
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ last_check_time –∏–∑ user_settings, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    # for user_id, settings in user_settings.items():
    #     if "last_successful_check" in settings: # –ü—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –±—ã –º—ã —Å–æ—Ö—Ä–∞–Ω—è–ª–∏ —ç—Ç–æ
    #         last_check_time[user_id] = settings["last_successful_check"]
    log_info("–î–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

async def post_shutdown_hook(application: Application):
    log_info("[smart_bot] Bot post_shutdown_hook: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ last_check_time –≤ user_settings, –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–Ω–æ
    # for user_id, lct in last_check_time.items():
    #    if user_id in user_settings:
    #        user_settings[user_id]["last_successful_check"] = lct
    await save_user_settings_async()
    await save_tracked_data_async()
    log_info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ø–µ—Ä–µ–¥ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ–º.")

def main():
    log_info(f"–ó–ê–ü–£–°–ö –ù–û–í–û–ô –í–ï–†–°–ò–ò –ë–û–¢–ê (—Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')})")
    log_info(f"–ó–∞–ø—É—Å–∫ CheckSiteUpdateBot —Å —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {config.log_level}")

    # –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –¥–ª—è —Ñ–∞–π–ª–∞ PicklePersistence –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ backups
    persistence_filepath = config.backup_dir / "bot_session_data.pickle"
    ptb_persistence = PicklePersistence(filepath=persistence_filepath)

    # –î–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–µ—Ä–µ–∑ application.bot_data
    # –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö —á–∞—Å—Ç—è—Ö PTB
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –∏–∑–º–µ–Ω—è–µ–º—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è "–∫–∞–∫ –µ—Å—Ç—å"
    bot_shared_data = {
        "user_settings_ref": user_settings, # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        "save_user_settings_async_func": save_user_settings_async,
        "reply_markup_for_lang_func": reply_markup_for_lang,
        "UserStepsEnum": UserSteps,
        "USER_DATA_STEP_KEY": USER_DATA_STEP, # –ö–ª—é—á –¥–ª—è user_data
        "USER_DATA_LANG_KEY": USER_DATA_LANG, # –ö–ª—é—á –¥–ª—è user_data
        "premium_tiers_ref": premium_tiers, # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å —Ç–∞—Ä–∏—Ñ–æ–≤
        "user_addresses_ref": user_addresses, # –°—Å—ã–ª–∫–∞ –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        "save_tracked_data_async_func": save_tracked_data_async,
        "translations_ref": translations, # –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤
        "config_ref": config, # –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –≤ handlers.py –∏–ª–∏ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
    }
    log_info(f"[smart_bot] main: bot_shared_data prepared. Keys: {list(bot_shared_data.keys())}")
    for key, value in bot_shared_data.items():
        if callable(value):
            log_info(f"[smart_bot] main: bot_shared_data function '{key}' is callable.")
        elif value is None: # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ None, —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–æ–π
            log_error(f"[smart_bot] main: bot_shared_data CRITICAL: '{key}' is None. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –æ—à–∏–±–∫–∞–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö.")

    application_builder = ApplicationBuilder().token(config.telegram_token)
    application_builder.persistence(ptb_persistence)
    application_builder.post_init(post_init_hook) # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Application –∏ JobQueue
    application_builder.post_shutdown(post_shutdown_hook) # –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    application = application_builder.build()
    application.bot_data.update(bot_shared_data)
    log_info("[smart_bot] main: Application built successfully with bot_data.")

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("language", change_language_command))
    application.add_handler(CommandHandler("set_frequency", set_frequency_command)) # –∏–∑ handlers.py
    application.add_handler(CommandHandler("list_addresses", address_list_command)) # —Å–∏–Ω–æ–Ω–∏–º –¥–ª—è "–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å–∞"
    application.add_handler(CommandHandler("stats", show_statistics_command))
    application.add_handler(CommandHandler("help", show_help_command))
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /subscribe, /addaddress <—Ä–µ–≥–∏–æ–Ω> <—É–ª–∏—Ü–∞>)
    log_info("[smart_bot] main: CommandHandlers registered.")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ CommandHandlers)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CallbackQuery (–¥–ª—è Inline –∫–Ω–æ–ø–æ–∫)
    application.add_handler(CallbackQueryHandler(handle_subscription_callback, pattern=f"^{CALLBACK_PREFIX_SUBSCRIBE}"))
    # application.add_handler(CallbackQueryHandler(handle_payment_callback, pattern=f"^{CALLBACK_PREFIX_PAY}")) # –î–ª—è –±—É–¥—É—â–µ–π –æ–ø–ª–∞—Ç—ã
    log_info("[smart_bot] main: Message and CallbackQuery Handlers registered.")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º –∏–ª–∏ –∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –æ–±—â–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    job_queue_interval_seconds = 60 # –ö–∞–∫ —á–∞—Å—Ç–æ —Å–∞–º JobQueue –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞—á—É
    application.job_queue.run_repeating(
        periodic_site_check_job,
        interval=job_queue_interval_seconds,
        first=10 # –ó–∞–ø—É—Å—Ç–∏—Ç—å —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
    )
    log_info(f"[smart_bot] main: JobQueue task 'periodic_site_check_job' scheduled to run every {job_queue_interval_seconds}s.")

    log_info("–ë–æ—Ç –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å...")
    application.run_polling()
    log_info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

if __name__ == "__main__":
    main()
